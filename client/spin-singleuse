#!/bin/bash

help () {
	echo 'USAGE: spin [-v] [-p] [-h <max heap size>] <num threads> <built-tests-dir> <matcher> [dependencies]...'
	echo -e "\t"'-v [OPTIONAL]: if present this flag specifies to run in verbose logging mode.'
	echo -e "\t"'-p [OPTIONAL]: if present this flag specifies to persist the test results in a database.'
	echo -e "\t"'-h <max heap size> [OPTIONAL]: if present this flag specifies the max heap size to use (eg. 64M)'
	echo -e "\t"'num threads: the number of threads to use to run the tests with.'
	echo -e "\t"'built-tests-dir: a directory that contains all of the built .class test files to be run.'
	echo -e "\t"'matcher: the pattern to match Java tests against (eg: Test.java matches files ending with Test.java)'
	echo -e "\t"'dependencies [OPTIONAL]: zero or more .class or .jar files required to run the tests.'
}

function parse () {
	if [ "$1" == '-v' ]
	then
		verbose=true
		num_optionals=$((num_optionals+1))
	elif [ "$1" == '-p' ]
	then
		persist=true
		num_optionals=$((num_optionals+1))
	elif [ "$1" == '-h' ]
	then
		heap_size="$2"
		num_optionals=$((num_optionals+2))
	else
		return 1
	fi
}

# We have 2 non-optional arguments we expect so if given less we fail out.
if [ $# -lt 2 ]
then
	help
	exit 1
fi

# Determine which optional flags have been given.
num_optionals=0
verbose=false
persist=false
heap_size=64M

if [[ "$1" =~ -. ]]
then
	parse "$1" "$2"
	if [ $? -ne 0 ]
	then
		echo "Failed to parse argument: $1"
		help
		exit 1
	fi
fi
if [[ "$2" =~ -. ]]
then
	parse "$2" "$3"
	if [ $? -ne 0 ]
        then
		echo "Failed to parse argument: $1"
                help
                exit 1
        fi
fi
if [[ "$3" =~ -. ]]
then
	parse "$3" "$4"
	if [ $? -ne 0 ]
        then
		echo "Failed to parse argument: $1"
                help
                exit 1
        fi
fi

# Set any system properties required by optional flags.
if [ "$verbose" = true ]
then
	verbose_property='-Denable_logger=true'
else
	verbose_property='-Denable_logger=false'
fi
if [ "$persist" = true ]
then
	persist_property='-Dwrite_to_db=true'
else
	persist_property='-Dwrite_to_db=false'
fi

# Determine the indices of the non-optional arguments.
num_threads_index=$((1+num_optionals))
test_dir_index=$((1+num_threads_index))
matcher_index=$((1+test_dir_index))

# Next argument must be a number, we verify that and this is the number of threads to use.
num_threads=${!num_threads_index}
if ! [[ "$num_threads" =~ ^[0-9]+$ ]]
then
	help
	exit
fi

num_threads_property="-Dnum_threads=$num_threads"
test_dir="${!test_dir_index}"
matcher="${!matcher_index}"

# Collect any given dependencies and then run the program.
for dependency in ${@:$((matcher_index+1))}
do
	dependencies="$dependencies $(realpath $dependency)"
done

if [ "$persist" = true ]
then
	classpath='spin-singleuse.jar:junit-4.12.jar:postgresql-42.2.12.jar'
else
	classpath='spin-singleuse.jar:junit-4.12.jar'
fi

# Set the database config file path property here. We hardcode this. Note this is only used when -p is given.
dbconfig_property='-Ddb_config_path=./config/db_config.txt'

# Run using the specified max heap size or our default 64MB
# Do a heap dump if an OOM is encountered
# If an OOM is encountered kill the process. Why? So we explicitly exit with a non-zero exit code to indicate failure.
java -Xmx$heap_size -XX:+HeapDumpOnOutOfMemoryError -XX:OnOutOfMemoryError="kill -9 %p" "$verbose_property" "$persist_property" "$dbconfig_property" "$num_threads_property" -cp "$classpath" spin.core.singleuse.SingleUseEntryPoint "$(realpath $test_dir)" "$matcher" $dependencies
